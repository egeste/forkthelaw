name: Crawler Status Report

on:
  # Run 50 minutes after every hour (after 45-min crawl + buffer)
  schedule:
    - cron: '50 * * * *'  # 50 minutes past every hour

  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  status-report:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4

      - name: Download latest database
        run: |
          gh release download latest -p 'law_library.db.gz'
          gunzip law_library.db.gz
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate status report
        id: report
        run: |
          # Create a detailed status report
          cat << 'EOF' > status_report.md
          # Law Library Crawler Status Report

          **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ## Database Statistics

          EOF

          # Run stats and append to report
          python cli.py stats >> status_report.md

          # Add job queue details
          echo "" >> status_report.md
          echo "## Job Queue Details" >> status_report.md
          echo "" >> status_report.md
          echo "\`\`\`" >> status_report.md
          sqlite3 law_library.db "SELECT job_type, status, COUNT(*) as count FROM job_queue GROUP BY job_type, status ORDER BY job_type, status;" >> status_report.md
          echo "\`\`\`" >> status_report.md

          # Calculate progress percentages
          echo "" >> status_report.md
          echo "## Progress by Content Type" >> status_report.md
          echo "" >> status_report.md

          sqlite3 law_library.db << 'SQL' >> status_report.md
          SELECT
            '- **US Code:** ' ||
            CAST((SELECT COUNT(*) FROM us_code) AS TEXT) ||
            ' sections scraped'
          UNION ALL
          SELECT
            '- **CFR:** ' ||
            CAST((SELECT COUNT(*) FROM cfr) AS TEXT) ||
            ' sections scraped'
          UNION ALL
          SELECT
            '- **Supreme Court:** ' ||
            CAST((SELECT COUNT(*) FROM supreme_court_cases) AS TEXT) ||
            ' cases scraped'
          UNION ALL
          SELECT
            '- **Constitution:** ' ||
            CAST((SELECT COUNT(*) FROM constitution) AS TEXT) ||
            ' sections scraped'
          UNION ALL
          SELECT
            '- **Federal Rules:** ' ||
            CAST((SELECT COUNT(*) FROM federal_rules) AS TEXT) ||
            ' rules scraped';
          SQL

          # Add database file info
          echo "" >> status_report.md
          echo "## Database File" >> status_report.md
          echo "" >> status_report.md
          echo "- **Size:** $(du -h law_library.db | cut -f1)" >> status_report.md
          echo "- **Download:** [Latest Release](https://github.com/${{ github.repository }}/releases/latest)" >> status_report.md

          # Output the report
          cat status_report.md

          # Save report content for issue
          echo "REPORT<<EOF" >> $GITHUB_OUTPUT
          cat status_report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or update status issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'ðŸ“Š Crawler Status Report';
            const body = process.env.REPORT;

            // Find existing status issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['status-report']
            });

            const existingIssue = issues.data.find(issue => issue.title === title);

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
              console.log(`Updated issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['status-report']
              });
              console.log(`Created issue #${issue.data.number}`);
            }
        env:
          REPORT: ${{ steps.report.outputs.REPORT }}
